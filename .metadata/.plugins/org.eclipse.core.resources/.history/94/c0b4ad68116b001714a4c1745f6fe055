package exit.services.principal;


import java.io.File;
import java.io.FileWriter;
import java.lang.management.ManagementFactory;
import java.lang.reflect.Method;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import exit.services.fileHandler.CSVHandler;
import exit.services.fileHandler.DirectorioManager;
import exit.services.principal.ejecutores.ParalelizadorDistintosFicheros;
import exit.services.singletons.ApuntadorDeEntidad;
import exit.services.singletons.ConfiguracionEntidadParticular;
import exit.services.singletons.EOutputs;
import exit.services.singletons.RecuperadorMapeoCsv;
import exit.services.singletons.RecuperadorPropiedadesBD;
import exit.services.singletons.RecEntAct;

import oracle.jdbc.OracleTypes;

public class Principal {
	public static final String UPDATE_CONTACTOS="UPDATE_CONTACTOS";
	public static final String INSERTAR_CONTACTOS="INSERTAR_CONTACTOS";
	public static final String INSERTAR_INCIDENTES="INSERTAR_INCIDENTES";
	public static final String BORRAR_INCIDENTES="BORRAR_INCIDENTES";
	

	
	public static void main(String[] args) throws Exception {		
		long time_start, time_end;
    	time_start = System.currentTimeMillis();
    	ApuntadorDeEntidad ap=ApuntadorDeEntidad.getInstance();
    	if(ap==null)
    		return;
    	while(ap.siguienteEntidad()){
    		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
	    	r.mostrarConfiguracion();
	    	switch(r.getAction().toUpperCase()){
	    		case ConfiguracionEntidadParticular.ACCION_CSVASERVICIO:csvAServicio();break;
	    		case ConfiguracionEntidadParticular.ACCION_SERVICIOAACSV:servicioACsv(); break;
	    		case ConfiguracionEntidadParticular.ACCION_SERVICIOASERVICIO:servicioAServicio(); break;
	    		case ConfiguracionEntidadParticular.ACCION_QBEBD : qbecampania(args);  break;
	    	}
	    }
	    	time_end = System.currentTimeMillis();
	    	System.out.println(ManagementFactory.getThreadMXBean().getThreadCount() );
	    	double tiempoDemorado=(time_end - time_start)/1000/60 ;
    		if(tiempoDemorado>1){
        		FileWriter fw = new FileWriter(DirectorioManager.getDirectorioFechaYHoraInicio("duracion.txt"));
    			fw.write("El proceso de updateo demoró un total de: "+tiempoDemorado+" minutos");
        		fw.close();
    		}    	
/***********************************************************/
		//***Borrar ficheros de ejecucion***/
/***********************************************************/
	//	FilesAProcesarManager.getInstance().deleteCSVAProcesar();
	}

	private static void qbecampania(String[] args){
		try{  			
			EjecutarQBESP qbe= new EjecutarQBESP();
			List<Integer> listaEnteros= new ArrayList<Integer>();
			qbe.ejecutarCampaniaCumpleanios(getClientSec());

			if(true)
				return;
			Class.forName("oracle.jdbc.driver.OracleDriver");  
			String driverType= RecuperadorPropiedadesBD.getInstance().getDriverType();
			String user= RecuperadorPropiedadesBD.getInstance().getUser();
			String password= RecuperadorPropiedadesBD.getInstance().getPassword();
			String database= RecuperadorPropiedadesBD.getInstance().getDatabase();
			String puerto= RecuperadorPropiedadesBD.getInstance().getPuerto();
			String ipConexion= RecuperadorPropiedadesBD.getInstance().getIpConexion();
			
			String coneccion=RecuperadorPropiedadesBD.getInstance().getConexion();
			System.out.println(coneccion+"  "+user+" "+password);
			Connection con=DriverManager.getConnection(  
					coneccion,user,password);  
			
			CallableStatement cs = con.prepareCall("{call SP_CRM_CAMPANIA_CUMPLEANIOS(?, ?)}");
			cs.setString(1, args.length==0?"13/06/2017":args[0]);
			cs.registerOutParameter(2, OracleTypes.CURSOR);
			cs.executeUpdate();

			ResultSet rs = (ResultSet) cs.getObject(2);
			while (rs.next()) {                  
  					 listaEnteros.add(rs.getInt(1));
			    	}
			for(Integer a: listaEnteros)
				System.out.println(a);
			  rs.close(); 		
			con.close();  
			qbe.ejecutarCampaniaCumpleanios(listaEnteros);
  
			}catch(Exception e){ System.out.println(e);}  
	}
	
	private static void csvAServicio(){
		ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
		ParalelizadorDistintosFicheros hiloApartre = new ParalelizadorDistintosFicheros();
      	try {
      		if(r.getMetodoPreEjecutor()!=null)
      			PreEjecutor.ejecutar(r.getMetodoPreEjecutor(), r.getParametroPreEjecutor());
      		hiloApartre.insertar();
      		if(r.isBorrarDataSetAlFinalizar()){
      			File file = new File(r.getPathCSVRegistros());
      			file.delete();
      		}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	private static void servicioACsv(){
		Ejecutor e= new Ejecutor();
		try{

			Integer cantRegistros=-1;
			ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
			if(r.isCreateEmptyFile())
				CSVHandler.crearCabecer(DirectorioManager.getDirectorioFechaYHoraInicio(r.getOutputFile()),r.getRecuperadorMapeoCSV().getCabecera() );
			if(r.isPaginado()){
				while(cantRegistros!=0){
					try{
						System.out.println("Pagina actual: "+r.getPaginaActual());					
						cantRegistros=(Integer)e.ejecutar(r.getMetodoEjecutor(),r.getParametroEjecutor());
						r.incresePaginaActual();
						}catch(Exception ex){CSVHandler csv= new CSVHandler(); csv.escribirErrorException("Error en entidad: "+ApuntadorDeEntidad.getInstance().getEntidadActual(), ex.getStackTrace(),true);}
				}
			}
			else{
				cantRegistros=(Integer)e.ejecutar(r.getMetodoEjecutor(),r.getParametroEjecutor());
			}
			if(r.getOutput()==EOutputs.SFTP){
				SFTP sftp= new SFTP(r.getSftpPropiedades());
				sftp.transferirFichero(DirectorioManager.getDirectorioFechaYHoraInicio(r.getOutputFile()).getPath(), r.getOutPutPath()+"/"+r.getOutputFile());
			}
			System.out.println("Fin");
		}
		catch (Exception d) {
			d.printStackTrace();
		}
	}
	
	private static void servicioAServicio(){
		Ejecutor e= new Ejecutor();
		try{
			Integer cantRegistros=-1;
			ConfiguracionEntidadParticular r= RecEntAct.getInstance().getCep();
//			System.out.println(RecEntAct.getInstance().getCep().getSubEntidad("contacto").getRecuperadorMapeoCSV().getCabecera());
			if(r.isPaginado()){
				while(cantRegistros!=0){
					try{
						System.out.println("Pagina actual: "+r.getPaginaActual());					
						cantRegistros=(Integer)e.ejecutar(r.getMetodoEjecutor(),r.getParametroEjecutor());
						r.incresePaginaActual();
						}catch(Exception ex){CSVHandler csv= new CSVHandler(); csv.escribirErrorException("Error en entidad: "+ApuntadorDeEntidad.getInstance().getEntidadActual(), ex.getStackTrace(),true);}
				}
			}
			else
				cantRegistros=(Integer)e.ejecutar(r.getMetodoEjecutor(),r.getParametroEjecutor());
			System.out.println("Fin");
		}
		catch (Exception d) {
			d.printStackTrace();
		}
	}
	
	private static List<Integer> getClientSec(){
		List<Integer> listaEnteros= new ArrayList<Integer>();
		listaEnteros.add(102507541);
		listaEnteros.add(101888978);
		listaEnteros.add(102005106);
		listaEnteros.add(103687661);
		listaEnteros.add(102493088);
		listaEnteros.add(319588);
		listaEnteros.add(2572237);
		listaEnteros.add(1508282);
		listaEnteros.add(1143222);
		listaEnteros.add(3170756);
		listaEnteros.add(2981128);
		listaEnteros.add(2025409);
		listaEnteros.add(3411981);
		listaEnteros.add(3033380);
		listaEnteros.add(103777930);
		listaEnteros.add(2411848);
		listaEnteros.add(5901119);
		listaEnteros.add(3535893);
		listaEnteros.add(5962638);
		listaEnteros.add(5693071);
		listaEnteros.add(5510750);
		listaEnteros.add(4824050);
		listaEnteros.add(5895985);
		listaEnteros.add(5760636);
		listaEnteros.add(102403118);
		listaEnteros.add(102516146);
		listaEnteros.add(102494730);
		listaEnteros.add(605588);
		listaEnteros.add(575907);
		listaEnteros.add(104150919);
		listaEnteros.add(704985);
		listaEnteros.add(474156);
		listaEnteros.add(2847822);
		listaEnteros.add(973462);
		listaEnteros.add(854092);
		listaEnteros.add(2319165);
		listaEnteros.add(4213152);
		listaEnteros.add(2214095);
		listaEnteros.add(2341021);
		listaEnteros.add(5372259);
		listaEnteros.add(2097893);
		listaEnteros.add(5903441);
		listaEnteros.add(4224412);
		listaEnteros.add(3344705);
		listaEnteros.add(5830207);
		listaEnteros.add(3395601);
		listaEnteros.add(5942313);
		listaEnteros.add(4974619);
		listaEnteros.add(4616465);
		listaEnteros.add(4940109);
		listaEnteros.add(5896022);
		listaEnteros.add(5707914);
		listaEnteros.add(5982957);
		listaEnteros.add(102520793);
		listaEnteros.add(102531332);
		listaEnteros.add(10808);
		listaEnteros.add(103974007);
		listaEnteros.add(104148707);
		listaEnteros.add(361755);
		listaEnteros.add(1413989);
		listaEnteros.add(4328152);
		listaEnteros.add(2737107);
		listaEnteros.add(3478741);
		listaEnteros.add(2199467);
		listaEnteros.add(3787415);
		listaEnteros.add(1993093);
		listaEnteros.add(4459643);
		listaEnteros.add(5958698);
		listaEnteros.add(4889925);
		listaEnteros.add(5987670);
		listaEnteros.add(5841351);
		listaEnteros.add(5989111);
		listaEnteros.add(4469531);
		listaEnteros.add(5937142);
		listaEnteros.add(4528903);
		listaEnteros.add(5467676);
		listaEnteros.add(5714445);
		listaEnteros.add(100056763);
		listaEnteros.add(102053240);
		listaEnteros.add(101897430);
		listaEnteros.add(222);
		listaEnteros.add(173238);
		listaEnteros.add(921358);
		listaEnteros.add(103911082);
		listaEnteros.add(924555);
		listaEnteros.add(1025196);
		listaEnteros.add(103830726);
		listaEnteros.add(5876369);
		listaEnteros.add(4015758);
		listaEnteros.add(4099421);
		listaEnteros.add(3062848);
		listaEnteros.add(5913230);
		listaEnteros.add(5923068);
		listaEnteros.add(5773522);
		listaEnteros.add(5931637);
		listaEnteros.add(5756276);
		listaEnteros.add(5204522);
		listaEnteros.add(101889489);
		listaEnteros.add(101959591);
		listaEnteros.add(102593294);
		listaEnteros.add(102094226);
		listaEnteros.add(102512881);
		listaEnteros.add(103649480);
		listaEnteros.add(102575090);
		listaEnteros.add(25337);
		listaEnteros.add(1111292);
		listaEnteros.add(719427);
		listaEnteros.add(301328);
		listaEnteros.add(103828870);
		listaEnteros.add(826060);
		listaEnteros.add(3271779);
		listaEnteros.add(814333);
		listaEnteros.add(1745818);
		listaEnteros.add(2835329);
		listaEnteros.add(928473);
		listaEnteros.add(3489438);
		listaEnteros.add(1815799);
		listaEnteros.add(2724697);
		listaEnteros.add(3157954);
		listaEnteros.add(2212168);
		listaEnteros.add(2965539);
		listaEnteros.add(3419610);
		listaEnteros.add(4860886);
		listaEnteros.add(4153259);
		listaEnteros.add(4568238);
		listaEnteros.add(5209041);
		listaEnteros.add(5737568);
		listaEnteros.add(5584351);
		listaEnteros.add(5322885);
		listaEnteros.add(5905678);
		listaEnteros.add(5690063);
		listaEnteros.add(5961346);
		listaEnteros.add(102487597);
		listaEnteros.add(102519010);
		listaEnteros.add(102348897);
		listaEnteros.add(103299936);
		listaEnteros.add(113917);
		listaEnteros.add(34917);
		listaEnteros.add(2048144);
		listaEnteros.add(638350);
		listaEnteros.add(651314);
		listaEnteros.add(103947606);
		listaEnteros.add(103649578);
		listaEnteros.add(788419);
		listaEnteros.add(939868);
		listaEnteros.add(942028);
		listaEnteros.add(2499089);
		listaEnteros.add(3404714);
		listaEnteros.add(3319331);
		listaEnteros.add(5114593);
		listaEnteros.add(5957031);
		listaEnteros.add(5500815);
		listaEnteros.add(5887069);
		listaEnteros.add(5874924);
		listaEnteros.add(4086255);
		listaEnteros.add(5942158);
		listaEnteros.add(3702892);
		listaEnteros.add(4360678);
		listaEnteros.add(4989447);
		listaEnteros.add(5865468);
		listaEnteros.add(5869512);
		listaEnteros.add(4907913);
		listaEnteros.add(102547647);
		listaEnteros.add(101885673);
		listaEnteros.add(102494909);
		listaEnteros.add(177598);
		listaEnteros.add(58985);
		listaEnteros.add(1718449);
		listaEnteros.add(551579);
		listaEnteros.add(736735);
		listaEnteros.add(1847807);
		listaEnteros.add(104143661);
		listaEnteros.add(1861963);
		listaEnteros.add(3972135);
		listaEnteros.add(5922490);
		listaEnteros.add(5946893);
		listaEnteros.add(2797132);
		listaEnteros.add(2723211);
		listaEnteros.add(3986893);
		listaEnteros.add(4045668);
		listaEnteros.add(5691242);
		listaEnteros.add(3667478);
		listaEnteros.add(4507948);
		listaEnteros.add(5953371);
		listaEnteros.add(5887447);
		listaEnteros.add(102486847);
		listaEnteros.add(101922372);
		listaEnteros.add(101882025);
		listaEnteros.add(102591523);
		listaEnteros.add(6907);
		listaEnteros.add(102504680);
		listaEnteros.add(102462898);
		listaEnteros.add(103662792);
		listaEnteros.add(2596572);
		listaEnteros.add(979738);
		listaEnteros.add(1558660);
		listaEnteros.add(103952025);
		listaEnteros.add(103648387);
		listaEnteros.add(3758634);
		listaEnteros.add(1523291);
		listaEnteros.add(2215623);
		listaEnteros.add(2213222);
		listaEnteros.add(4218055);
		listaEnteros.add(3264222);
		listaEnteros.add(5075057);
		listaEnteros.add(5958779);
		listaEnteros.add(5987690);
		listaEnteros.add(2906436);
		listaEnteros.add(5456555);
		listaEnteros.add(3298506);
		listaEnteros.add(5268451);
		listaEnteros.add(5942169);
		listaEnteros.add(5741729);
		listaEnteros.add(5753306);
		listaEnteros.add(4653364);
		listaEnteros.add(5791486);
		listaEnteros.add(5876795);
		listaEnteros.add(5988397);
		listaEnteros.add(5063880);
		listaEnteros.add(5988937);
		listaEnteros.add(5491660);
		return listaEnteros;
		
	}
	
}
